#!/usr/bin/env python
import os
import sys
import inspect
import futils
import urllib
import tarfile
import os.path as path
import distutils.dir_util as dirutil
from progressbar import ProgressBar
Import('build')

revision = 5
url = 'http://kroll.appcelerator.com.s3.amazonaws.com/kroll-thirdparty-r%s.tgz' % revision
tpbase = path.join(build.cwd(), 'thirdparty-r%s' % revision)
tppath = 'thirdparty-r%s/%s-%s' % (revision, build.os, build.arch)
fpath = build.third_party = path.join(build.cwd(), tppath)
rtdir = build.runtime_build_dir

def exists():
	return path.isdir(tpbase)

def fetch():
	print "You don't seem to have the appropriate thirdparty files. I'll fetch them."
	print "Downloading %s" % url

	pbar = ProgressBar().start()
	try:
		def progress_callback(count, block_size, total_size):
			if (total_size < 0):
				raise Exception("Could not fetch archive! Does it exist on the server?")
			percent = int(count * block_size * 100/total_size)
			pbar.update(percent)

		fname, msg = urllib.urlretrieve(url, reporthook=progress_callback)

		print "Fetched it (%s). I'm going to unpack it now..." % (fname)
		os.makedirs(tpbase)
		tfile = tarfile.open(fname, mode="r:gz")
		tfile.extractall(path=tpbase)
	finally:
		urllib.urlcleanup()
		pbar.finish()

if not exists(): fetch()

if build.is_linux():
	futils.CopyTree(path.join(fpath, 'webkit/lib'), rtdir)
	futils.CopyTree(path.join(fpath, 'poco/lib'), rtdir)

elif build.is_win32():
	futils.CopyTree(path.join(fpath, 'poco', 'bin'), rtdir)
	futils.CopyTree(path.join(fpath, 'webkit', 'bin'), rtdir)
	futils.CopyToDir(path.join(fpath, 'microsoft', 'Microsoft.VC80.CRT'), rtdir)

	webkit_tlb = path.join(fpath, 'webkit', 'lib', 'WebKit.tlb')
	webkit_manifest = path.join(build.runtime_build_dir, 'WebKit.manifest')
	t = Command(webkit_manifest, webkit_tlb, 'mt.exe /nologo /tlb:"$SOURCE" /dll:WebKit /out:"$TARGET"')
	build.mark_build_target(t)

elif build.is_osx():
	excludes = ['.h', '.defs', 'JavaScriptGlue.framework']
	targets = []
	for framework in Glob(path.join(tppath, '*/*.framework')):
		t = build.utils.CopyToDir(framework, rtdir, exclude=excludes)
		targets.append(t)
	for libdir in Glob(path.join(tppath, '*/lib')):
		t = build.utils.CopyTree(libdir, rtdir, exclude=excludes)
		targets.append(t)
	build.mark_build_target(targets)
