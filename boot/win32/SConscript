#!/usr/bin/env python
Import('build')
import os, os.path as path

Env = build.env.Clone()
#Env.Append(CPPDEFINES=['USE_NO_EXPORT=1','NO_UNZIP=1'])
Env.Append(CPPDEFINES=['USE_NO_EXPORT=1'])
Env.Append(CPPPATH=['#common/win32','#common',path.join(build.kroll_source_dir,'api')])
Env.Append(LIBS=['kernel32','shell32','user32','advapi32','iphlpapi'])
Env.Append(LINKFLAGS=['/NODEFAULTLIB:MSJAVA.lib'])
Env.Append(CCFLAGS=['/O2','/GL','/FD','/EHsc','/W3','/Wp64','/Zi','/TP'])
if ARGUMENTS.get('debug', 0) or ARGUMENTS.get('console',0):
	Env.Append(LINKFLAGS=['/MANIFEST','/MANIFESTFILE:build\\win32\\boot.exe.intermediate.manifest','/SUBSYSTEM:CONSOLE','/OPT:REF','/OPT:ICF','/LTCG','/MACHINE:X86'])	
	Env.Append(CPPDEFINES=['WIN32_CONSOLE=1'])
else:
	Env.Append(LINKFLAGS=['/MANIFEST','/MANIFESTFILE:build\\win32\\boot.exe.intermediate.manifest','/SUBSYSTEM:WINDOWS','/OPT:REF','/OPT:ICF','/LTCG','/MACHINE:X86'])

zo = os.path.join(build.dir,'unzip_boot.o')
o = Env.Object(target = zo, source = path.join(build.kroll_source_dir,'api','unzip','unzip.cpp'))

resfile = Env.RES('winboot.rc')

sources = ['main.cpp', resfile, zo]
Env.Append(CPPPATH=[build.kroll_utils_dir])
sources += build.get_kroll_utils(path.join(build.dir, 'objs', 'boot'))

kboot_out = path.join(build.dir, 'runtime', 'template', 'kboot')
p = Env.Program(kboot_out, sources)
build.mark_build_target(p)

webkit_tp = path.join(build.third_party, 'webkit')
webkit_lib = path.join(webkit_tp, 'lib')
webkit_tlb = path.join(webkit_lib,'WebKit.tlb')

#Env.AddPostAction(p, ('mt.exe -nologo /tlb:"%s" /dll:"runtime\WebKit" /outputresource:"%s\kboot.exe;#1" /manifest "%s"' % (webkit_tlb, build.dir, 'build\\win32\\boot.exe.intermediate.manifest')))
t = Env.AddPostAction(p, ('mt.exe -nologo /tlb:"%s" /dll:"runtime\WebKit" /outputresource:"%s.exe;#1"' % (webkit_tlb, kboot_out)))
build.mark_build_target(t)
