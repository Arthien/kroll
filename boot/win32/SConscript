#!/usr/bin/env python
Import('build')
import os, os.path as path

Env = build.env.Clone()
#Env.Append(CPPDEFINES=['USE_NO_EXPORT=1','NO_UNZIP=1'])
Env.Append(CPPDEFINES=['USE_NO_EXPORT=1'])
Env.Append(CPPPATH=['#common/win32','#common',path.join(build.kroll_source_dir,'api')])
Env.Append(LIBS=['kernel32','shell32','user32','advapi32','iphlpapi'])
Env.Append(LINKFLAGS=['/NODEFAULTLIB:MSJAVA.lib'])
Env.Append(CCFLAGS=['/O2','/GL','/FD','/EHsc','/W3','/Wp64','/Zi','/TP'])

manifest_file = path.join(build.dir, 'boot.exe.intermediate.manifest')
linkflags = []
linkflags.append('/MANIFEST')
linkflags.append('/MANIFESTFILE:%s' % manifest_file)
linkflags += ['/OPT:REF','/OPT:ICF','/LTCG','/MACHINE:X86']
if ARGUMENTS.get('debug', 0) or ARGUMENTS.get('console',0):
	linkflags.append('/SUBSYSTEM:CONSOLE'),
	Env.Append(CPPDEFINES=['WIN32_CONSOLE=1'])
Env.Append(LINKFLAGS=linkflags)

resfile = Env.RES('winboot.rc')

sources = ['main.cpp', resfile]
Env.Append(CPPPATH=[build.kroll_utils_dir])
sources += build.get_kroll_utils(path.join(build.dir, 'objs', 'boot'))

kboot_out = path.join(build.dir, 'runtime', 'template', 'kboot')
p = Env.Program(kboot_out, sources)
build.mark_build_target(p)

webkit_tp = path.join(build.third_party, 'webkit')
webkit_lib = path.join(webkit_tp, 'lib')
webkit_tlb = path.join(webkit_lib, 'WebKit.tlb')

t = Env.AddPostAction(p, ('mt.exe -nologo /tlb:"%s" /dll:"runtime\WebKit" /outputresource:"%s.exe;#1" /manifest "%s"' % (webkit_tlb, kboot_out, manifest_file)))
build.mark_build_target(t)
