#!/usr/bin/env python
Import('build')
import os, os.path as path

Env = build.env.Clone()
sources = Glob('*.cpp')
sources.extend(build.get_kroll_utils(path.join(build.dir, 'objs', 'boot')))

#if build.is_32():
#	d = path.join(build.kroll_source_dir, 'boot', 'breakpad')
#	sources.extend(Glob(path.join(d, 'common/*.c')))
#	sources.extend(Glob(path.join(d, 'common/*.cc')))
#	sources.extend(Glob(path.join(d, 'common/linux/*.cc')))
#	sources.extend(Glob(path.join(d, 'client/*.cc')))
#	sources.extend(Glob(path.join(d, 'client/linux/handler/*.cc')))
#	sources.extend(Glob(path.join(d, 'processor/*.cc')))
#	Env.Append(CPPPATH=[d])
#	Env.Append(CPPDEFINES = [['USE_BREAKPAD', 1]])

Env.Append(CPPPATH=[build.kroll_utils_dir])
Env.Append(LIBS=['dl'])

kboot_out = path.join(build.dir, 'runtime', 'template', 'kboot')
p = Env.Program(kboot_out, sources)
build.mark_build_target(p)
