#!/usr/bin/env python
import os, os.path as path
Import('build')

Env = build.env.Clone()
sources = ['boot.cpp']
Env.Append(CPPDEFINES=['USE_NO_EXPORT=1', 'NO_UNZIP=1'])
Env.Append(CPPPATH=[path.join(build.kroll_source_dir, 'api')])

# Add the utils
Env.Append(CPPPATH=[build.kroll_utils_dir])
sources += build.get_kroll_utils(path.join(build.dir, 'objs', 'boot'))

if build.is_osx():
	sources.append('boot_osx.mm')
	Env.Append(LIBS=['dl'])
	Env.Append(FRAMEWORKS=['Cocoa','IOKit'])

if build.is_linux():
	sources.append('boot_linux.cpp')
	Env.Append(LIBS=['dl'])

if build.is_win32():
	sources += ['boot_win32.cpp', 'winboot.rc']

	Env.Append(LIBS=['kernel32','shell32','user32','advapi32','iphlpapi'])
	Env.Append(LINKFLAGS=['/NODEFAULTLIB:MSJAVA.lib'])
	Env.Append(CCFLAGS=['/O2','/GL','/FD','/EHsc','/W3','/Wp64','/Zi','/TP'])

	manifest_file = path.join(build.dir, 'boot.exe.intermediate.manifest')
	linkflags = []
	linkflags.append('/MANIFEST')
	linkflags.append('/MANIFESTFILE:%s' % manifest_file)
	linkflags += ['/OPT:REF','/OPT:ICF','/LTCG','/MACHINE:X86']
	if ARGUMENTS.get('debug', 0) or ARGUMENTS.get('console',0):
		linkflags.append('/SUBSYSTEM:CONSOLE'),
		Env.Append(CPPDEFINES=['WIN32_CONSOLE=1'])
	Env.Append(LINKFLAGS=linkflags)

# Breakpad integration
breakpad = ARGUMENTS.get('breakpad', '0') != '0'
if breakpad and ((build.is_32() and build.is_linux()) or not build.is_linux()):
	sources += \
		Glob('breakpad/common/*.c') + \
		Glob('breakpad/common/*.cc') + \
		Glob('breakpad/client/*.cc') + \
		Glob('breakpad/processor/*.cc')
	Env.Append(CPPPATH = ['breakpad'])
	Env.Append(CPPDEFINES = [['USE_BREAKPAD', 1]])

	if build.is_linux():
		sources += \
			Glob('breakpad/client/linux/handler/*.cc') + \
			Glob('breakpad/common/linux/*.cc')

	if build.is_osx():
		Env.Append(LIBS=['libcrypto'])
		sources += \
			Glob('breakpad/common/mac/dwarf/*.cc') + \
			Glob('breakpad/common/mac/*.cc') + \
			Glob('breakpad/common/mac/*.mm') + \
			Glob('breakpad/common/mac/*.m') + \
			Glob('breakpad/client/mac/handler/*.cc')

kboot_out = path.join(build.dir, 'runtime', 'template', 'kboot')
p = Env.Program(kboot_out, sources)
build.mark_build_target(p)

if build.is_win32():
	webkit_tp = path.join(build.third_party, 'webkit')
	webkit_lib = path.join(webkit_tp, 'lib')
	webkit_tlb = path.join(webkit_lib, 'WebKit.tlb')
	t = Env.AddPostAction(p, ('mt.exe -nologo /tlb:"%s" /dll:"runtime\WebKit" /outputresource:"%s.exe;#1" /manifest "%s"' % (webkit_tlb, kboot_out, manifest_file)))
	build.mark_build_target(t)

